# .github/workflows/test.yml

name: "Go Tests"

# This action will trigger on push to any branch and on pull requests
on:
  push:
    # Run on push to any branch
  pull_request:
    branches: ["main", "master"]

# Set default permissions
permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: ["1.23", "1.24"] # Test against multiple Go versions

    steps:
      # Step 1: Check out the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Go environment
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      # Step 3: Download Go dependencies
      - name: Download dependencies
        run: go mod download

      # Step 4: Verify dependencies
      - name: Verify dependencies
        run: go mod verify

      # Step 5: Run go vet
      - name: Run go vet
        run: go vet ./...

      # Step 6: Run tests with coverage
      - name: Run tests
        run: |
          echo "Running all Go tests with coverage..."
          echo "Go version: $(go version)"
          echo "OS: $(uname -a)"
          echo "CPU cores: $(nproc)"

          # Set environment variables for better test stability
          export CGO_ENABLED=1
          export GOMAXPROCS=2

          # Run tests for each package separately to isolate failures
          failed_packages=""
          for pkg in $(go list ./...); do
            echo "=========================================="
            echo "Testing package: $pkg"
            echo "=========================================="

            # Run without race detector first to check for basic failures
            if ! go test -v -timeout=120s -short -count=1 "$pkg"; then
              echo "BASIC TEST FAILED: $pkg"
              failed_packages="$failed_packages $pkg"

              # Try again with more verbose output
              echo "Retrying with more verbose output..."
              go test -v -timeout=120s -short -count=1 "$pkg" || echo "Still failing on retry"
              continue
            fi

            # Skip race detector in CI for now to avoid flaky tests
            echo "Basic tests passed for: $pkg"
          done

          # Report failed packages
          if [ -n "$failed_packages" ]; then
            echo "=========================================="
            echo "FAILED PACKAGES: $failed_packages"
            echo "=========================================="
            exit 1
          fi

          # Run all tests together for coverage (without race detector for stability)
          echo "=========================================="
          echo "Running coverage tests..."
          echo "=========================================="
          go test -v -short -count=1 -coverprofile=coverage.out -covermode=atomic ./...
          echo "Tests completed successfully!"

      # Step 7: Upload coverage to Codecov (optional)
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false # Don't fail CI if codecov upload fails

      # Step 8: Build project to ensure compilation
      - name: Build project
        run: |
          echo "Building project..."
          go build ./...
          echo "Build completed successfully!"

      # Step 9: Run golangci-lint (optional but recommended)
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m
